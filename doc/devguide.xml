<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
  <bookinfo>
    <title>Silk Development Guide</title>

    <author>
      <firstname>Ted</firstname>

      <surname>Kulp</surname>

      <affiliation>
        <orgname>http://silkframework.com</orgname>
      </affiliation>
    </author>

    <pubdate>2009</pubdate>
  </bookinfo>

  <chapter>
    <title>Sample Application</title>

    <section>
      <title>What to build?</title>

      <para>In order to show how the various parts of the system work, we're
      going to have to build a simple application that touches a lot of
      aspects. In the spirit of programming introductions everywhere, we're
      going to build an application to catalog and display "Hello World!" in
      many different languages -- programming languages. It should have the
      following features:</para>

      <itemizedlist>
        <listitem>
          <para>Add, edit, and delete new entries</para>
        </listitem>

        <listitem>
          <para>List the entries</para>
        </listitem>

        <listitem>
          <para>Sort the entries</para>
        </listitem>

        <listitem>
          <para>Only allow editing to a predefined list of users</para>
        </listitem>

        <listitem>
          <para>Have a login/logout for thse predefined users</para>
        </listitem>
      </itemizedlist>

      <para>Hopefully, by the end of this example, you'll have a good solid
      foundation on using Silk for your own applications.</para>
    </section>

    <section>
      <title>Setting up your environment</title>

      <para>Discuss setting up apache, php, etc on a unix or Mac environment.
      Explain that I use a Mac for mostly everything I do development-wise.
      Explain why quickly, then drop it.</para>

      <para>Make sure git is installed. Also, a nice ruby environment is good
      as well. Allows for the use of giternal intead of doing traditional git
      branches... messy, messy, messy.</para>
    </section>

    <section>
      <title>Creating a new application</title>

      <para>The basic steps for setting up an application with silk go as
      follows. Using a terminal, use the following commands:</para>

      <orderedlist>
        <listitem>
          <para><command>mkdir helloworld &amp;&amp; cd
          helloworld</command></para>

          <para>Create a new directory to house your new web application. This
          should obviously sit under the application directory of your
          installed web server. If could also be symlinked, or setup via the
          configuration to work outside the web root, but that's best left to
          the user for those types of intricicies.</para>
        </listitem>

        <listitem>
          <para><command>mkdir config</command></para>

          <para>Create the config directory. This will be the place where the
          application's configuration lives. It's the one directory that can't
          be autogen'ed, unless you're not using giternal.</para>
        </listitem>

        <listitem>
          <para><command>vi config/giternal.yml</command></para>

          <para>Edit the giternal configuration file. Any standard text editor
          can be used in place of vi. Again, if you're not going to use
          giternal, then this can be skipped. It's contents should be:</para>

          <programlisting>silk:
    repo: git://github.com/tedkulp/silk.git
    path: lib</programlisting>
        </listitem>

        <listitem>
          <para><command>giternal update</command></para>

          <para>This will update any extenals defined in the
          config/giternal.yml file. In this case, it will clone the silk
          repository locally in the lib/silk directory. You should see
          something like:</para>

          <programlisting>Teds-MBP:helloworld tedkulp$ giternal update
  Updating silk
   ..updated
  Teds-MBP:helloworld tedkulp$ </programlisting>
        </listitem>

        <listitem>
          <para><command>cp lib/silk/autogen.sh .</command></para>

          <para>This copies the autogen.sh script into your helloworld
          directory. This script will setup a typical application directory
          structure and proper permissions where absolutely necessary.</para>
        </listitem>

        <listitem>
          <para><command>sh autogen.sh</command></para>

          <para>Run the script in your helloworld directory. This will create
          the directories necessary, copy the default config files to your
          config directory and copy the index.php file to your helloworld
          directory. You should only need to run this file one time, as
          running it again could copy over any changes you've made to
          configuration files previously.</para>
        </listitem>
      </orderedlist>

      <para>At this point, you're now setup for application development. You
      should edit the config/setup.yml file to point to your development
      database, and also set any other settings to taste.</para>
    </section>

    <section>
      <title>Setup the database</title>

      <para>The Silk ORM is based on the ActiveRecord model of database
      access. Basically, this means that the model is a rough representation
      of a row in a database table. The model bases it's properties
      automatically on the fields in the table and methods on that object
      should load and save records to it's given table.</para>

      <para>There is generally a 1:1 relationship of model class to table.
      While this isn't always the case, it is easiest to think in those terms
      when first designing your table structure. Of course, because the model
      is automatically based on the fields in the table, it's pretty flexible
      to add and remove fields later on.</para>

      <para>Tables in Silk automatically have a prefix on them, as defined in
      the config.yml file. It defaults to "silk_". This is done so that in
      cases where multiple applications have to live in the same database,
      they can live independantly and not get table name clashes. We're going
      to use "silk_" in all of our examples.</para>

      <bridgehead>Migrations</bridgehead>

      <para>To create the tables, we're going to use a system built into silk
      called Migrations. Migrations are basically a development tool that
      allows you to record database changes in increments. When multiple
      developers are working on the same project, they can very quickly get
      their database up to speed with everyone else instead of having to
      create and modify tables by hand... or worse, drop the database and
      start fresh.</para>

      <para>Migrations are built into the silk.php script that was added to
      the applications root directory during the installation process. First,
      let's generate a new migration file:</para>

      <para><command>php silk.php migration generate "Initial
      tables"</command></para>

      <para>This command will generate a brand new migration file for you to
      edit. It creates the file with a timestamp in the name, so that they
      easily merged in the proper order with other developers files. For
      example, this command generated a file called
      <code>db/migrate/20090208151626_initial_tables.php</code>.</para>

      <para>Open that file in your favorite editor and replace it's defaults
      with the following code:</para>

      <programlisting>&lt;?php
  function up($dict, $db_prefix)
  {
    SilkDatabase::create_table('entries', "
      id I AUTO KEY,
      user_id I,
      language C(50),
      text X,
      create_date T,
      modified_date T
    ");

    SilkDatabase::create_table('users', "
      id I KEY AUTO,
      username C(25),
      password C(75),
      first_name C(50),
      last_name C(50),
      email C(255),
      openid C(255),
      salt C(255),
      checksum C(255),
      active I1,
      create_date T,
      modified_date T
    ");
  }

  function down($dict, $db_prefix)
  {
    SilkDatabase::drop_table('users');
    SilkDatabase::drop_table('entries');
  }
?&gt;</programlisting>

      <para>Migrations are written in a way that if you need to roll back your
      database to a particular version, it's very easy to do so. Because of
      this, all the migration files have an up() and down() function in them.
      The up function is called when we're migrating up, and the down when
      rolling back. While it's not always necessary to create a down()
      function, it's usually a good idea to do so just in case there are
      problems later on.</para>

      <para>In our up function, we've created 2 new tables. One for the
      built-in SilkUser model, and one for the new Entry model we're going to
      create in a bit. In the down function, we've just done the opposite and
      dropped those 2 tables.</para>

      <para>To run our migration file, we just use the following command:
      <command>php silk.php migration run</command>. This will look at the
      current database, figure out migration it's currently "on" and then run
      each migration file after it in succession until it's up to date. If you
      look at your database, you should see a <code>silk_entries</code> and
      <code>silk_users</code> table waiting to be used. In addition, you'll
      see a 3rd <code>silk_migration_version</code> table which stores the
      current version of this database for later migrations.</para>
    </section>

    <section>
      <title>Models</title>

      <bridgehead>Setup</bridgehead>

      <para>Now that we have our tables in place, we can setup the model
      classes. Silk does come with facilities for handling users, logins,
      groups, etc, so there is nothing you need to do there. However, you do
      need to setup a model class for your entries table. For this, we will
      create an Entry class and show you some of the basics of the Silk
      ORM.</para>

      <para>Create a file in components/app/models called class.entry.php.
      Start with the following code:</para>

      <programlisting>&lt;?php

class Entry extends SilkObjectRelationalMapping
{
  var $table = 'entries';
  
  public function __construct()
  {
    parent::__construct();
  }
}

?&gt;</programlisting>

      <para>This represents the absolute minimum you can have in your model
      class. There are a lot of extensions to this, but this is the basics. We
      basically have an Entry class that when instantiated will represent one
      row in the "silk_entries" table you created earlier.</para>

      <para>With extending the SilkObjectRelationMapping class, however, you
      do get a ton of functionality for free. The ability to find(load)
      existing entries, save and delete are all built in.</para>

      <para>As with any magic, it relies on conventions. For example, it
      expects to have a field called <code>id</code> that is an autoincrement
      field and the primary key. This is a manditory field and the ORM will
      refuse to work if that field doesn't exist. There are also a few other
      magic fields that the ORM will recognize and automatically fill in and
      use when appropriate.</para>

      <para>For example, <code>create_date</code> and
      <code>modified_date</code> are fields that never have to be written to
      if you don't want to. By convention, <code>create_date</code> and
      <code>modified_date</code> will be setup and updated automatically only
      if they happen to exist in that table... there is nothing else you have
      to do.</para>

      <para>Another example is the <code>type</code> field. If this field is
      in your table's schema, then the current class name is entered into this
      field. This is an advanced field that really comes into it's own when
      you extend a ORM'd class and need the system to keep track of which type
      of object this originally was.</para>

      <bridgehead>Validation</bridgehead>

      <para>Silk relies on the idea that most validation happens in the model.
      The model should be in charge of making sure it's valid before it will
      persist the changes back to the database. This is generally different
      from most web applications, where validation happens on the form level.
      Granted, there are situations where a form validation would make more
      sense. However, in most simple CRUD operations, model-based validation
      leads to less reuse of code and allows for validation logic to be
      changed in one location.</para>

      <para>When <code>save()</code> is run on a model, Silk will
      automatically call the <code>validate()</code> method if it exists.
      <code>validate()</code> will check various pieces of the model, and fill
      any errors into an internal array variable on the object, then return
      without a return value. If Silk sees that this internal array variable
      is not empty, it will cause <code>save()</code> to fail and return
      false.</para>

      <para>Here is an example validate() method for our Entry class we've
      created above:</para>

      <programlisting>public function validate()
{
  $this-&gt;validate_not_blank('language');
  $this-&gt;validate_not_blank('text');
}</programlisting>

      <para>Silk does come with several validation helpers that you can use
      instead of rewriting the same basic code for each required field.
      However, you can also put in your own validation logic as well. For
      example, let's say you think Fortran doesn't deserve an entry in our
      database:</para>

      <programlisting>public function validate()
{
  $this-&gt;validate_not_blank('language');
  $this-&gt;validate_not_blank('text');

  if (strtolower($this-&gt;language) == 'fortran')
  {
    $this-&gt;add_validation_error("Fortran?  1978 called.  They want their programming language back.");
  }
}</programlisting>
    </section>

    <section>
      <title>Controllers</title>

      <para>Controllers do exactly what they sound like they would do. They
      control the flow of your application, control what models are called and
      what views should be displayed. A controller usually is broken down into
      one or more actions that perform a particular task.</para>

      <para>In our application, we're going to start with one controller, the
      <code>EntryController</code>. It will essentially do the functions
      necessary to view, edit and remove entries from our database. By
      default, Silk parses all of it's URLs based on this concept. We have a
      controller, that controller has multiple actions, and then extra
      parameters are added from there. For instance, if we were going to edit
      an <code>Entry</code>, we could have a URL similar to:
      <code>http://localhost/entry/edit/1</code>. This would equate to
      language of call the edit action in the entry controller with the id of
      1. Using this model, it becomes very easy to anticipate where to put new
      functions and what their URLs will be.</para>

      <para>By default, if no action is given in our URL, then we call the
      <code>index</code> action on the specified controller. This is generally
      used as a synonym for "list" if you're doing a typical CRUD application.
      So, if we went to the <code>http://localhost/entry</code> URL, I should
      get the list of all of the entries in our database, curteosy of the
      <code>index</code> action.</para>

      <para>The controller for that would look something like:</para>

      <programlisting>&lt;?php

class EntryController extends SilkControllerBase
{
  function index($params)
  {
    $entries = orm('entry')-&gt;find_all();
    $this-&gt;set('entries', $entries);
  }
}

?&gt;</programlisting>

      <para>This is a very basic controller, but it does highlight some of the
      key elements of controllers and how they're to be used in normal
      circumstances. Let's walk through the example.</para>

      <para>All controllers extend the <code>SilkControllerBase</code> class.
      This allows us to do a lot of things behind to scenes in order to
      properly match up controllers with views (discussed in the next chapter)
      and gives lots convienence methods.</para>

      <para>All methods that are mapped to actions will be passed an array of
      parameters, hence the <code>$params</code> attribute. This array
      contains a key/value hash of all <code>$_REQUEST</code> variables sent
      via POST, decoded from the GET string, or from other more advanced
      means.</para>

      <para>The index method then does two things. In the first line, it uses
      the Silk ORM to find all of the <code>Entry</code> objects in the
      database. The found objects are then put in <code>$entries</code> as an
      array. The second line then sets them in the controller. In reality,
      this is making it so that <code>$entries</code> is available to the view
      so that the entries can be looped through and displayed.</para>
    </section>
  </chapter>
</book>
